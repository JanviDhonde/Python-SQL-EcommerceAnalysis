# -*- coding: utf-8 -*-
"""Ecommerce Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SZTHmMZhJjElEeYCZxB9B7uvXDwjDtwq
"""

import pandas as pd
import mysql.connector
import matplotlib.pyplot as plt
import seaborn as sns
import os
import numpy as np

conn = mysql.connector.connect(host = "localhost",
                               username = "root",
                              password = "Jaishreeram",
                              database = "ecommerce" )
cur = conn.cursor()

"""***All unique cities where customers are located.***"""

query = """select distinct customer_city from customers """

cur.execute(query)

dt = cur.fetchall()
df = pd.DataFrame(dt, columns = ["city"])
df

"""***Number of orders placed in 2017.***"""

query = """select count(order_id)
           from orders
           where year(order_purchase_timestamp) = 2017 """

cur.execute(query)

dt = cur.fetchall()

dt[0][0]

"""***Total sales per category.***"""

query = """select upper(p.product_category), round(sum(oi.price + oi.freight_value),2) as total_sales
           from order_items as oi
           join products as p
           on oi.product_id = p.product_id
           group by p.product_category
           order by total_sales desc"""

cur.execute(query)

dt = cur.fetchall()

df = pd.DataFrame(dt, columns = ["Product Category" , "Sales"])
df

# Visualization of top 5 product category

fd = df.head(5)

plt.figure(figsize = (10,6))
xa = sns.barplot(x = 'Product Category', y = 'Sales', data = fd )
plt.title("Top 5 Category by Sales")

def formated_num(number):
    if number >= 1e6:
        return f'{number / 1e6:.1f}M'
    if number >= 1e3:
        return f'{number / 1e3:.1f}k'
    else :
        return str(number)

for bars in xa.containers:
    xa.bar_label(bars, labels = [formated_num(label) for label in bars.datavalues])

"""***Percentage of orders that were paid in installments.***"""

query = """select (select count(order_id) from payments where payment_installments >= 1)/ count(order_id) * 100
           from payments"""

cur.execute(query)

dt = cur.fetchall()
dt

"""***Count the number of customers from each state***"""

query = """select customer_state, count(customer_id)
from customers
group by customer_state"""

cur.execute(query)

dt = cur.fetchall()
df = pd.DataFrame(dt, columns = ["State","No. of customer"])
df = df.sort_values(by = "No. of customer", ascending = False )

plt.figure(figsize = (12,7))
sns.barplot(x = "State", y = "No. of customer", data = df )
plt.title("Number of customer by State")

"""***Number of orders per month in 2018.***"""

query = """select monthname(order_purchase_timestamp) as Months , count(order_id) as Number_of_order
from orders where year(order_purchase_timestamp) = 2018
group by Months
order by Months"""

cur.execute(query)

dt = cur.fetchall()

df = pd.DataFrame(dt, columns = ["Months","Order_count"])
df

od = ["January", "February", "March",  "April", "May", "June", "July", "August", "September", "October"]

plt.figure(figsize = (12,7))
ax = sns.barplot(x = "Months", y = "Order_count", data = df, order = od, color = "skyblue")
plt.xticks(rotation = 45)
ax.bar_label(ax.containers[0])
plt.title("Number of orders per month in 2018")
plt.show()

"""***Average number of products per order, grouped by customer city***"""

query = """SELECT
    customers.customer_city,
    ROUND(AVG(order_count.oc), 2) AS average_od
FROM
    customers
        JOIN
    (SELECT
        orders.order_id,
            orders.customer_id,
            COUNT(order_items.order_item_id) AS oc
    FROM
        orders
    JOIN order_items ON orders.order_id = order_items.order_id
    GROUP BY orders.order_id , orders.customer_id) AS order_count ON customers.customer_id = order_count.customer_id
GROUP BY customers.customer_city
order by average_od desc"""

cur.execute(query)

dt = cur.fetchall()
df = pd.DataFrame(dt, columns = ["City","Avg_order"])
df

"""***Percentage of total revenue contributed by each product category***"""

query = """select p.product_category,
round((sum(oi.price + oi.freight_value) / (select sum(price) + sum(freight_value) from order_items)) *100,2) as percentage_of_total_revenue
from order_items as oi
join products as p
on oi.product_id = p.product_id
group by p.product_category
order by percentage_of_total_revenue desc"""

cur.execute(query)

dt = cur.fetchall()
df = pd.DataFrame(dt, columns = ["Category","Percentage_contribution"])
df

"""***Correlation between product price and the number of times a product has been purchased.***"""

query = """select pd.product_category, count(od.product_id) as order_count,
round(avg(od.price),2) as avg_price
from products as pd join order_items as od
on pd.product_id = od.product_id
group by pd.product_category"""

cur.execute(query)

dt = cur.fetchall()
df = pd.DataFrame(dt, columns = ["Category","order_count","avg_price"])

arr1 = df["order_count"]
arr2 = df["avg_price"]

a = np.corrcoef([arr1,arr2])
print("Correlation between product price and the number of times a product has been purchased is :",a)

"""***Total revenue generated by each seller, and rank them by revenue.***"""

query = """select *, dense_rank() over(order by revenue_by_seller desc) as Rankk from
(select oi.seller_id , sum(p.payment_value) as revenue_by_seller
from order_items as oi join payments as p
on oi.order_id = p.order_id
group by oi.seller_id) as sp;"""

cur.execute(query)

dt = cur.fetchall()
df = pd.DataFrame(dt, columns = ["seller_id","Revenue","Rank"])
print(df)
fd = df.head(5)
print(fd)

"""***Moving average of order values for each customer over their order history.***"""

query = """select *, round(avg(payments) over(partition by customer_id order by order_purchase_timestamp
	       rows between 2 preceding and current row),2) as moving_avg from
(select od.customer_id, od.order_purchase_timestamp, p.payment_value as Payments
from orders as od join payments as p
on od.order_id = p.order_id) as ma;"""

cur.execute(query)

dt = cur.fetchall()
df = pd.DataFrame(dt, columns = ["Customer_id","order_purchase_timestamp","payments","Moving Average"])
df

"""***Cumulative sales per month for each year.***"""

query = """select Years, Months, Sales,
round(sum(Sales) over(order by Years, Months),2) as Cumulative_sales
from
(select year(od.order_purchase_timestamp) as Years,
month(od.order_purchase_timestamp) as Months,
round(sum(p.payment_value),2) as Sales
from orders as od join payments as p
on od.order_id = p.order_id
group by Years,Months
order by Years,Months) as cu;"""

cur.execute(query)

dt = cur.fetchall()
df = pd.DataFrame(dt, columns = ["Years","Months","Sales","Cumulative Sales"])
df

plt.figure(figsize = (12,6))
sns.set(style = 'whitegrid')
sns.lineplot(x = 'Months', y = 'Cumulative Sales', hue = 'Years', data = df, marker = "o", palette = "tab10", legend = "full")
plt.title("Cumulative sales by months")
plt.show()

"""***Calculate the year-over-year growth rate of total sales***"""

query = """with year_sales as (select year(od.order_purchase_timestamp) as Years,
round(sum(p.payment_value),2) as Sales
from orders as od join payments as p
on od.order_id = p.order_id
group by Years
order by Years)

select years, Sales, lag(Sales, 1) over(order by Years) as previous_year_sales,
round((Sales - lag(Sales, 1) over(order by Years))/lag(Sales, 1) over(order by Years) * 100,2) as yoy_growth_Percent
from year_sales"""

cur.execute(query)
dt = cur.fetchall()
df = pd.DataFrame(dt, columns = ["Year","Sales","Previous year sale","yoy Growth %"])
df

"""***Calculate the retention rate of customers, defined as the percentage of customers who make another purchase within 6 months of their first purchase.***"""

query = """with fo as (select customer_id, min(order_purchase_timestamp) as first_order
from orders
group by customer_id),
co as (select fo.customer_id, count(distinct(od.order_purchase_timestamp)) as count_of_order
from fo join orders as od
on fo.customer_id = od.customer_id
and od.order_purchase_timestamp > first_order
and od.order_purchase_timestamp < date_add(first_order, interval 6 month)
group by fo.customer_id)

select (count(co.customer_id) / count(fo.customer_id))*100 as Retentaion_rate
from fo join co
on fo.customer_id = co.customer_id"""

cur.execute(query)
dt = cur.fetchall()
df = pd.DataFrame(dt, columns = ["Retention_rate"])
df

# Since none of our customers buys again with us in 6 months so we have no Retention rate

"""***Top 3 customers who spent the most money in each year.***"""

query = """select * from
(select year(od.order_purchase_timestamp) as Years, od.customer_id, sum(p.payment_value) as payment,
dense_rank() over(partition by year(od.order_purchase_timestamp) order by sum(p.payment_value) desc) as Rankk
from orders as od join payments as p
on od.order_id = p.order_id
group by year(od.order_purchase_timestamp), od.customer_id) as rn
where Rankk <= 3"""

cur.execute(query)
dt = cur.fetchall()
df = pd.DataFrame(dt, columns = ["Year","Customer ID","Payments","Rank"])
plt.figure(figsize = (10,6))
sns.barplot(x = "Customer ID", y = "Payments",hue = "Year",data = df )
plt.xticks(rotation = 90)
plt.show()